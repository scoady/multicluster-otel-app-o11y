mode: daemonset

service:
  enabled: true

image:
  repository: "otel/opentelemetry-collector-contrib"

extraEnvs:
  - name: "K8S_NODE_NAME"
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName

resources:
  requests:
    memory: 256Mi
    cpu: 100m
  limits:
    memory: 256Mi
    cpu: 300m
useGOMEMLIMIT: true

tolerations:
  - key: "node-role.kubernetes.io/control-plane"
    operator: "Exists"
    effect: "NoSchedule"

clusterRole:
  create: true
  rules:
    - apiGroups: ["*"]
      resources: ["*"]
      verbs: ["*"]

affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: az
              operator: In
              values: ["a", "b", "c"]

presets:
  hostMetrics:
    enabled: false
  kubeletMetrics:
    enabled: false
  kubernetesAttributes:
    enabled: true

config:
  extensions:
    health_check: {}

  receivers:
    k8s_events:
      auth_type: kubeConfig
    prometheus:
      config:
        global:
          scrape_interval: 60s
          scrape_timeout: 10s
          external_labels:
            cluster: "apps-cluster"
            cluster_name: "apps-cluster"
        scrape_configs:
        - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          job_name: integrations/kubernetes/cadvisor
          kubernetes_sd_configs:
            - role: node
          relabel_configs:
            - replacement: kubernetes.default.svc.cluster.local:443
              target_label: __address__
            - regex: (.+)
              replacement: /api/v1/nodes/$${1}/proxy/metrics/cadvisor
              source_labels:
                - __meta_kubernetes_node_name
              target_label: __metrics_path__
          metric_relabel_configs:
            - source_labels: [__name__]
              action: keep
              regex: 'container_cpu_usage_seconds_total|container_memory_working_set_bytes|container_network_transmit_bytes_total'
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: false
            server_name: kubernetes

        - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          job_name: integrations/kubernetes/kubelet
          kubernetes_sd_configs:
            - role: node
          relabel_configs:
            - replacement: kubernetes.default.svc.cluster.local:443
              target_label: __address__
            - regex: (.+)
              replacement: /api/v1/nodes/$${1}/proxy/metrics
              source_labels:
                - __meta_kubernetes_node_name
              target_label: __metrics_path__
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: false
            server_name: kubernetes

        - job_name: integrations/kubernetes/kube-state-metrics
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - action: keep
              regex: kube-state-metrics
              source_labels:
                - __meta_kubernetes_pod_label_app_kubernetes_io_name

        - job_name: integrations/node_exporter
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - action: keep
              regex: prometheus-node-exporter.*
              source_labels:
                - __meta_kubernetes_pod_label_app_kubernetes_io_name
            - action: replace
              source_labels:
                - __meta_kubernetes_pod_node_name
              target_label: instance
            - action: replace
              source_labels:
                - __meta_kubernetes_namespace
              target_label: namespace

    otlp:
      protocols:
        grpc:
          endpoint: 0.0.0.0:4317
        http:
          endpoint: 0.0.0.0:4318

  processors:
    resource/local:
      attributes:
        - key: cluster
          action: upsert
          value: "apps-cluster"
        - key: cluster_name
          action: upsert
          value: "apps-cluster"
        - key: k8s.cluster.name
          action: upsert
          value: "apps-cluster"

    resource/inbound:
      attributes:
        - key: service.instance.id
          action: insert
          from_attribute: k8s.pod.uid
        - key: cluster
          action: insert
          value: "apps-cluster"
        - key: cluster_name
          action: insert
          value: "apps-cluster"
        - key: k8s.cluster.name
          action: insert
          value: "apps-cluster"

    transform/logs:
      error_mode: ignore
      log_statements:
        - context: log
          statements:
            - set(attributes["cluster"], resource.attributes["cluster"])
            - set(attributes["cluster_name"], resource.attributes["cluster_name"])
            - set(attributes["k8s.cluster.name"], resource.attributes["k8s.cluster.name"])

    transform/traces:
      error_mode: ignore
      trace_statements:
        - context: span
          statements:
            - replace_pattern(name, "\\?.*", "")
            - replace_match(name, "GET /api/products/*", "GET /api/products/{productId}")

    transform/metrics:
      error_mode: ignore
      metric_statements:
        - context: datapoint
          statements:
            - set(attributes["cluster"], "apps-cluster")
            - set(attributes["cluster_name"], "apps-cluster")

    batch:
      send_batch_size: 1000
      send_batch_max_size: 1000

  exporters:
    loadbalancing/http:
      protocol:
        otlp:
          tls:
            insecure: true
      resolver:
        static:
          hostnames:
            - "172.18.0.11"

  service:
    extensions: [health_check]
    pipelines:
      traces:
        receivers: [otlp]
        processors: [k8sattributes,resource/inbound, transform/traces, batch]
        exporters: [loadbalancing/http]
      metrics:
        receivers: [otlp, prometheus]
        processors: [k8sattributes,resource/inbound, resource/local, transform/metrics, batch]
        exporters: [loadbalancing/http]
      logs:
        receivers: [otlp, k8s_events]
        processors: [k8sattributes,resource/inbound, transform/logs, batch]
        exporters: [loadbalancing/http]
