mode: daemonset

service:
  enabled: true
  type: LoadBalancer

image:
  repository: "otel/opentelemetry-collector-contrib"

resources:
  requests:
    memory: 256Mi
    cpu: 100m
  limits:
    memory: 256Mi
    cpu: 300m
useGOMEMLIMIT: true

extraEnvs:
  - name: "K8S_NODE_NAME"
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  - name: OTELPASS
    valueFrom:
      secretKeyRef:
        name: otel-secret
        key: otel-pass
  - name: OTELUSERID
    valueFrom:
      secretKeyRef:
        name: otel-secret
        key: otel-userid

tolerations:
  - key: "node-role.kubernetes.io/control-plane"
    operator: "Exists"
    effect: "NoSchedule"

clusterRole:
  create: true
  rules:
    - apiGroups: ["*"]
      resources: ["*"]
      verbs: ["*"]

affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: az
              operator: In
              values: ["a", "b", "c"]

presets:
  hostMetrics:
    enabled: true
  kubeletMetrics:
    enabled: false
  kubernetesAttributes:
    enabled: true

config:
  extensions:
    health_check: {}
    basicauth/grafana_cloud:
      client_auth:
        username: ${OTELUSERID}
        password: ${OTELPASS}

  receivers:
    filelog:
      include:
        - /var/log/pods/*/*/*.log
      start_at: end
      include_file_path: true
      operators:
        - type: json_parser
          timestamp:
            parse_from: attributes.time
            layout: "%Y-%m-%dT%H:%M:%S.%LZ"
        - type: regex_parser
          regex: '^/var/log/pods/(?P<k8s_namespace_name>[^_]+)_(?P<k8s_pod_name>[^_]+)_(?P<k8s_pod_uid>[^/]+)/(?P<container_name>[^/]+)/'
          parse_from: attributes["log.file.path"]
          parse_to: attributes

    k8s_events:
      auth_type: kubeConfig
    prometheus:
      config:
        global:
          scrape_interval: 60s
          scrape_timeout: 10s
          external_labels:
            cluster: "obs-cluster"
        scrape_configs:
          - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            job_name: integrations/kubernetes/cadvisor
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - replacement: kubernetes.default.svc.cluster.local:443
                target_label: __address__
              - regex: (.+)
                replacement: /api/v1/nodes/$$1/proxy/metrics/cadvisor
                source_labels:
                  - __meta_kubernetes_node_name
                target_label: __metrics_path__
            metric_relabel_configs:
              - source_labels: [__name__]
                action: keep
                regex: 'container_cpu_usage_seconds_total|container_memory_working_set_bytes|container_network_transmit_bytes_total'
            scheme: https
            tls_config:
              insecure_skip_verify: true

          - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            job_name: integrations/kubernetes/kubelet
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - replacement: kubernetes.default.svc.cluster.local:443
                target_label: __address__
              - regex: (.+)
                replacement: /api/v1/nodes/$$1/proxy/metrics
                source_labels:
                  - __meta_kubernetes_node_name
                target_label: __metrics_path__
            scheme: https
            tls_config:
              insecure_skip_verify: true

          - job_name: integrations/kubernetes/kube-state-metrics
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - action: keep
                regex: kube-state-metrics
                source_labels:
                  - __meta_kubernetes_pod_label_app_kubernetes_io_name

          - job_name: integrations/node_exporter
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - action: keep
                regex: prometheus-node-exporter.*
                source_labels:
                  - __meta_kubernetes_pod_label_app_kubernetes_io_name
              - action: replace
                source_labels:
                  - __meta_kubernetes_pod_node_name
                target_label: instance
              - action: replace
                source_labels:
                  - __meta_kubernetes_namespace
                target_label: namespace
  

    otlp:
      protocols:
        grpc: {}
        http: {}

  processors:
    k8sattributes:
      extract:
        metadata:
        - k8s.namespace.name
        - k8s.deployment.name
        - k8s.statefulset.name
        - k8s.daemonset.name
        - k8s.cronjob.name
        - k8s.job.name
        - k8s.node.name
        - k8s.pod.name
        - k8s.pod.uid
        - k8s.pod.start_time
      filter:
        node_from_env_var: K8S_NODE_NAME
      passthrough: false
      pod_association:
      - sources:
        - from: resource_attribute
          name: k8s.pod.ip
      - sources:
        - from: resource_attribute
          name: k8s.pod.uid
      - sources:
        - from: connection
    resource/local:
      attributes:
        - key: cluster
          action: upsert
          value: "obs-cluster"
        - key: cluster_name
          action: upsert
          value: "obs-cluster"
        - key: k8s.cluster.name
          action: upsert
          value: "obs-cluster"

    resource/inbound:
      attributes:
        - key: service.instance.id
          action: insert
          from_attribute: k8s.pod.uid

    transform/common:
      error_mode: ignore
      trace_statements:
        - context: span
          statements:
            - replace_pattern(name, "\\?.*", "")
            - replace_match(name, "GET /api/products/*", "GET /api/products/{productId}")
      metric_statements:
        - context: datapoint
          statements:
            - set(attributes["cluster"], "obs-cluster") where attributes["cluster"] == nil
            - set(attributes["cluster_name"], attributes["cluster"]) where attributes["cluster_name"] == nil
      log_statements:
        - context: log
          statements:
            - set(attributes["cluster"], "obs-cluster") where attributes["cluster"] == nil
            - set(attributes["cluster_name"], attributes["cluster"]) where attributes["cluster_name"] == nil

    batch:
      send_batch_size: 1000
      send_batch_max_size: 1000

  exporters:
    debug: {}
    otlphttp/grafana_cloud:
      endpoint: "https://otlp-gateway-prod-us-west-0.grafana.net/otlp"
      auth:
        authenticator: basicauth/grafana_cloud

  service:
    extensions: [basicauth/grafana_cloud, health_check]
    pipelines:
      traces:
        receivers: [otlp]
        processors: [k8sattributes,resource/inbound, transform/common, batch]
        exporters: [otlphttp/grafana_cloud]
      metrics:
        receivers: [otlp]
        processors: [k8sattributes,resource/inbound, resource/local, batch]
        exporters: [otlphttp/grafana_cloud]
      metrics/local:
        receivers: [prometheus]
        processors: [k8sattributes,resource/local, transform/common, batch]
        exporters: [otlphttp/grafana_cloud]
      logs:
        receivers: [otlp]
        processors: [k8sattributes,resource/inbound, transform/common, batch]
        exporters: [otlphttp/grafana_cloud]
      logs/k8s:
        receivers: [k8s_events,filelog]
        processors: [k8sattributes, resource/local, batch]
        exporters: [otlphttp/grafana_cloud, debug]
